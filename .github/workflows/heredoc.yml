name: Here-Doc Breakout via grep (Minimal)

on:
  issues:
    types: [opened, edited]

jobs:
  demo:
    runs-on: ubuntu-latest
    steps:
      - name: SAFE — grep via env var + pipe
        shell: bash
        env:
          ISSUE_BODY: ${{ github.event.issue.body }}
        run: |
          set -euo pipefail
          # Extract whatever follows 'VALUE:' on a line (PCRE \K keeps only the right side)
          REGEX='^VALUE:\s*\K.*'
          echo "=== SAFE PARSE ==="
          printf '%s\n' "$ISSUE_BODY" | grep -Po "$REGEX" || echo "(no match)"
          echo "=== DONE SAFE ==="

      - name: Check that no injected file exists (should be absent)
        run: |
          if [[ -f injected.txt ]]; then
            echo "::error::Unexpected injected.txt present after SAFE parse."
            exit 1
          else
            echo "OK: injected.txt not present."
          fi

      - name: VULNERABLE — grep via here-doc (delimiter breakout)
        shell: bash
        #continue-on-error: true   # let the job continue even if the step errors after breakout
        run: |-
          echo "=== VULNERABLE PARSE (here-doc) ==="
          REGEX='^VALUE:\s*\K.*'
          # If the issue body contains a line exactly 'EOF', the here-doc ends early
          # and subsequent lines in the body are executed as shell commands.
          grep -Po "$REGEX" <<\EOF
          ${{ github.event.issue.body }}
          EOF
          echo "=== DONE VULNERABLE ==="

      - name: Check for injected file (proof of code exec)
        if: ${{ always() }}
        run: |
          if [[ -f injected.txt ]]; then
            echo "Found injected.txt (proof of code execution):"
            ls -l injected.txt
            echo "Contents:"
            cat injected.txt
          else
            echo "No injected.txt present."
          fi
